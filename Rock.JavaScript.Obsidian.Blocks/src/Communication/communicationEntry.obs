<template>
    <Panel v-if="!config.isHidden"
           :title="!config.communication || !config.communication.communicationGuid ? 'New Communication' : config.communication.subject || 'Communication'"
           titleIconCssClass="fa fa-comment-o"
           type="block">
        <template #headerActions>
            <HighlightLabel v-if="statusLabel">{{ statusLabel }}</HighlightLabel>
        </template>

        <template #default>
            <div ID="pnlEdit" v-if="!areResultsShown">
                <PanelNavigationBar v-model="selectedMediumEntityTypeGuid"
                                    :isFirstSelectedByDefault="true"
                                    :items="mediums" />

                <NotificationBox v-if="validationSummaryMessage"
                                 id="ValidationSummary"
                                 heading="Please correct the following:"
                                 alertType="validation">{{ validationSummaryMessage }}</NotificationBox>

                <NotificationBox v-if="false"
                                 id="nbInvalidTransport"
                                 alertType="warning"
                                 :dismissible="true"
                                 heading="Warning" />

                <CommunicationMedium :communication="config.communication"
                                     :isFullMode="isFullMode"
                                     :mediumEntityTypeGuid="selectedMediumEntityTypeGuid"
                                     :mediumOptions="config.mediumOptions"
                                     ref="communicationMedium"
                                     @error="error => validationSummaryMessage = error"
                                     @success="onSuccess" />
            </div>

            <div ref="resultsDiv" v-if="areResultsShown" id="pnlResult" class="js-pnl-result">
                <NotificationBox alertType="success">{{ resultMessage }}</NotificationBox>
                <br />
                <a :href="viewCommunicationUrl">View Communication</a>
            </div>
        </template>

        <template #footerActions v-if="communicationMedium">
            <RockButton id="btnSubmit"
                        class="btn btn-primary"
                        type="button"
                        @click="onSend">Send</RockButton>

            <RockButton v-if="isFullMode"
                        id="btnTest"
                        class="btn btn-link"
                        type="button"
                        @click="onSendTest">Send Test</RockButton>

            <RockButton v-if="isFullMode"
                        id="btnSave"
                        class="btn btn-link"
                        type="button"
                        @click="onSave">Save as Draft</RockButton>

            <RockButton id="btnCancel"
                        class="btn btn-link"
                        type="button"
                        @click="communicationMedium.cancel()">Cancel</RockButton>
        </template>
    </Panel>
</template>

<script setup lang="ts">
    import { computed, nextTick, ref } from "vue";
    import CommunicationMedium from "./CommunicationEntry/communicationMedium.partial.obs";
    import PanelNavigationBar from "./CommunicationEntry/panelNavigationBar.partial.obs";
    import HighlightLabel from "@Obsidian/Controls/highlightLabel.obs";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import Panel from "@Obsidian/Controls/panel.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import { useConfigurationValues } from "@Obsidian/Utility/block";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { Nullable } from "./CommunicationEntry/types.partial";
    import { CommunicationEntryInitializationBox } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntry/communicationEntryInitializationBox";
    import { CommunicationEntrySendResponseBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntry/communicationEntrySendResponseBag";
    import { CommunicationStatus, CommunicationStatusDescription } from "@Obsidian/Enums/Communication/communicationStatus";

    const config = useConfigurationValues<CommunicationEntryInitializationBox>();
    defineProps();

    //#region Values

    const areResultsShown = ref<boolean>(false);
    const isFullMode = ref<boolean>(config.isFullMode);
    const statusLabel = ref<Nullable<string>>("Draft");
    const resultsDiv = ref<HTMLElement | undefined>();
    const communicationMedium = ref<InstanceType<typeof CommunicationMedium>>();
    const mediums = computed<ListItemBag[]>(() => config.mediums ?? []);
    const selectedMediumEntityTypeGuid = ref<Nullable<string>>("");
    const resultMessage = ref<Nullable<string>>("");
    const viewCommunicationUrl = ref<string>(window.location.href);
    const validationSummaryMessage = ref<Nullable<string>>();

    //#endregion

    //#region Functions

    function showResults(): void {
        areResultsShown.value = true;

        // Scroll on next tick so Vue can process the v-if binding that shows the elements.
        nextTick(() => {
            const results = resultsDiv.value;
            if (results) {
                results.scrollIntoView({
                    behavior: "smooth",
                    block: "start",
                    inline: "start"
                });
            }
        });
    }

    function getStatusLabel(status: CommunicationStatus): string {
        if (status === CommunicationStatus.Transient) {
            return "Draft";
        }
        else {
            return CommunicationStatusDescription[status];
        }
    }

    //#endregion

    //#region Event Handlers

    /** Sends the communication. */
    function onSend(): void {
        // Clear the error message.
        validationSummaryMessage.value = null;

        communicationMedium.value?.send();
    }

    /** Sends a test communication. */
    function onSendTest(): void {
        // Clear the error message.
        validationSummaryMessage.value = null;

        communicationMedium.value?.sendTest();
    }

    /** Saves the communication. */
    function onSave(): void {
        // Clear the error message.
        validationSummaryMessage.value = null;

        communicationMedium.value?.save();
    }

    function onSuccess(value: CommunicationEntrySendResponseBag): void {
        statusLabel.value = getStatusLabel(value.communicationStatus ?? CommunicationStatus.Draft);
        resultMessage.value = value.message;

        if (value.redirectToViewMode) {
            const url = new URL(window.location.href);
            const queryParams = url.searchParams;

            queryParams.set("CommunicationId", (value.communicationId ?? "") + "");
            viewCommunicationUrl.value = url.href;
        }

        showResults();
    }

    //#endregion

    //#region Watchers

    //#endregion

</script>