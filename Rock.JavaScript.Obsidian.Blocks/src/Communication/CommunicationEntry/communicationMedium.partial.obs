<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <KeepAlive>
        <Email v-if="isGuid(mediumEntityTypeGuid, EntityType.CommunicationMediumEmail)"
               :communication="communication"
               :isFullMode="isFullMode"
               :key="EntityType.CommunicationMediumEmail"
               :mediumEntityTypeGuid="mediumEntityTypeGuid"
               :mediumOptions="(mediumOptions as CommunicationEntryEmailMediumOptionsBag)"
               ref="mediumComponent"
               @error="v => emit('error', v)"
               @success="v => emit('success', v)" />
        <Sms v-else-if="isGuid(mediumEntityTypeGuid, EntityType.CommunicationMediumSms)"
             :isFullMode="isFullMode"
             :mediumEntityTypeGuid="mediumEntityTypeGuid"
             ref="mediumComponent" />
        <PushNotification v-else-if="isGuid(mediumEntityTypeGuid, EntityType.CommunicationMediumPushNotification)"
                          :isFullMode="isFullMode"
                          :mediumEntityTypeGuid="mediumEntityTypeGuid"
                          ref="mediumComponent" />
        <div v-else>
            Unknown communication medium (Guid: {{ mediumEntityTypeGuid }}).
            Options are
            <ul>
                <li>{{ EntityType.CommunicationMediumEmail }}</li>
                <li>{{ EntityType.CommunicationMediumSms }}</li>
                <li>{{ EntityType.CommunicationMediumPushNotification }}</li>
            </ul>
        </div>
    </KeepAlive>
</template>

<script setup lang="ts">
    import { PropType, ref } from "vue";
    import Email from "./communicationMediumEmail.partial.obs";
    import Sms from "./communicationMediumSms.partial.obs";
    import PushNotification from "./communicationMediumPushNotification.partial.obs";
    import { Nullable } from "./types.partial";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import { CommunicationEntryCommunicationBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntry/communicationEntryCommunicationBag";
    import { CommunicationEntryMediumOptionsBaseBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntry/communicationEntryMediumOptionsBaseBag";
    import { CommunicationEntryEmailMediumOptionsBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntry/communicationEntryEmailMediumOptionsBag";
    import { CommunicationEntrySendResponseBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntry/communicationEntrySendResponseBag";

    const props = defineProps({
        isFullMode: {
            type: Boolean as PropType<boolean>,
            default: false
        },
        mediumEntityTypeGuid: {
            type: String as PropType<Nullable<string>>,
            required: false
        },
        initialOptions: {
            type: Object as PropType<Nullable<CommunicationEntryMediumOptionsBaseBag>>,
            required: false
        },
        communication: {
            type: Object as PropType<Nullable<CommunicationEntryCommunicationBag>>,
            required: false
        },
        mediumOptions: {
            type: Object as PropType<Nullable<CommunicationEntryMediumOptionsBaseBag>>,
            required: false
        },
    });
    defineExpose({
        cancel,
        save: saveDraft,
        send,
        sendTest,
    });

    const emit = defineEmits<{
        (e: "error", value: string): void,
        (e: "success", value: CommunicationEntrySendResponseBag): void
    }>();

    //#region Values

    const mediumComponent = ref<InstanceType<typeof Email> | InstanceType<typeof Sms> | InstanceType<typeof PushNotification> | undefined>();

    //#endregion

    //#region Computed Values

    //#endregion

    //#region Functions

    function isGuid(sourceGuid: Nullable<string>, targetGuid: Nullable<string>): boolean {
        return !!sourceGuid && !!targetGuid && sourceGuid.toLocaleLowerCase().localeCompare(targetGuid.toLocaleLowerCase(), undefined, { sensitivity: "base" }) === 0;
    }

    /**
     * Cancels the communication entry.
     */
    function cancel(): Promise<void> {
        return Promise.resolve();
    }

    /**
     * Saves the communication.
     */
    async function saveDraft(): Promise<void> {
        await mediumComponent.value?.save();
    }

    /**
     * Sends the communication.
     */
    async function send(): Promise<void> {
        await mediumComponent.value?.send();
    }

    /**
     * Sends a test communication.
     */
    async function sendTest(): Promise<void> {
        await mediumComponent.value?.sendTest();
    }

    //#endregion

    //#region Event Handlers

    //#endregion

    //#region Watchers

    //#endregion
</script>