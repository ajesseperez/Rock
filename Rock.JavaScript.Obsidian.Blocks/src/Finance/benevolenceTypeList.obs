<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="id"
          itemTerm="Benevolence Type"
          :entityTypeGuid="EntityType.BenevolenceType"
          stickyHeader
          liveUpdates
          :onAddItem="config.isAddEnabled ? onAddItem : undefined"
          @selectItem="onSelectItem">
        <ReorderColumn :onOrderChanged="onOrderChanged" />

        <TextColumn name="name"
                    title="Name"
                    field="name"
                    :filter="textValueFilter"
                    visiblePriority="xs"
                    width="20%" />

        <TextColumn name="description"
                    title="Description"
                    field="description"
                    :filter="textValueFilter"
                    visiblePriority="xs"
                    width="40%" />

        <BooleanColumn name="showFinancialResults"
                       title="Show Financial Results"
                       field="showFinancialResults"
                       visiblePriority="xs"
                       width="10%" />

        <BooleanColumn name="isActive"
                       title="Is Active"
                       field="isActive"
                       visiblePriority="xs"
                       width="10%" />

        <AttributeColumns :attributes="config.gridDefinition?.attributeFields ?? []" />

        <SecurityColumn />

        <DeleteColumn v-if="config.isDeleteEnabled" @click="onDeleteClick" />
    </Grid>
</template>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { AttributeColumns, BooleanColumn, TextColumn, textValueFilter, DeleteColumn, SecurityColumn, ReorderColumn } from "@Obsidian/Controls/grid";
    import { alert } from "@Obsidian/Utility/dialogs";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { BenevolenceTypeListOptionsBag } from "@Obsidian/ViewModels/Blocks/Finance/BenevolenceTypeList/benevolenceTypeListOptionsBag";
    import { BenevolenceTypeListBag } from "@Obsidian/ViewModels/Blocks/Finance/BenevolenceTypeList/benevolenceTypeListBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { NavigationUrlKey } from "./BenevolenceTypeList/types.partial";
    import { reactive, ref, PropType } from "vue";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<BenevolenceTypeListBag | null>,
            required: false
        },

        options: {
            type: Object as PropType<BenevolenceTypeListOptionsBag>,
            required: true
        }
    });

    const config = useConfigurationValues<ListBlockBox<BenevolenceTypeListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }

    /**
    * Called when an individual has changed the order of a row.
    *
    * @param item The item that was moved.
    * @param beforeItem The item that was before the item that was moved.
    */
    async function onOrderChanged(item: Record<string, unknown>, beforeItem: Record<string, unknown> | null): Promise<void> {
        const data = {
            key: props.modelValue?.id,
            guid: item.guid,
            beforeGuid: beforeItem?.guid ?? null
        };

        const result = await invokeBlockAction("ReorderBenevolenceType", data);

        if (!result.isSuccess) {
            alert(result.errorMessage || "Unable to reorder benevolence types. Please try again.");
            return;
        }

        await loadGridData();
    }

    /**
     * Called when a row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("Delete", {
            key
        });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => r["idKey"] === key);

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to delete benevolence type.");
        }
    }

    /**
     * Called when the Add button has been clicked by the indivual.
     */
    function onAddItem(): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", "0");
        }
    }

    // #endregion

    gridDataSource.value = loadGridData();
</script>
